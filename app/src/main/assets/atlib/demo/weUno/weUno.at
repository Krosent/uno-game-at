import /.at.lang.futures;
enableFutures(false);
import /.at.lang.totam;


def log(text) {
  Android.Log.i("weUno", text);
};

def makeWeUno(myID := /.at.support.util.randomNumberBetween(0, 125)) {
  def ts; // tuple space

  // myID := /.at.support.util.randomNumberBetween(1, 125)
  // Init this variable when device's player clicked connect button.
  def myReference;

  //def myID;
  def myName; // Let us suppose that each name is unique. (impossible to have two players with the same name).

  // By default all devices have id == 0.
  //We change our ID as soon as we get new device discovered.
  //If we discover new device -> we change our ID, unless we are already connected to the game.
  //def myID;

  // isConnected variable is our condition checker.
  // !! We will not change myID if isConnected is true.
  def isConnected := false;

  // Players who connected to the session. By default is zero.
  // Getter function getPlayersCounter().
  def playersCounter := 0;

  // Add new players to these lists (exclude player on this playing device).
  //HashMap of [id,Far Reference]
  // UPD: HashMap of [userID,[Username, Far Reference]]
  def otherPlayersHashMap := jlobby.java.util.HashMap.new();

  //Array of far references, avoids iterating over hashmap
  def otherPlayers := [];

  def gui; // reference to Android UI object.

  deftype UnoPlayer;

  def init(newId){
    myID := newId;
  };

  //interface for android gui.
  def localInterface := object: {
    def connectPlayer(username) { // This method triggers on button click from Android.
        def playerTuple := tuple: ["UnoPlayer", myID, var: `player, var: `isConnected];

        ts.when: playerTuple in:{
          //system.println(“ “ + from + “ says: “ + content);
          isConnected := true;
          def connectedPlayerTuple := tuple: ["UnoPlayer", myID, player, isConnected];
          ts.inject: connectedPlayerTuple;
        };
    };

    def setID(id) { myID := id };

    def setName(newName) { myName := newName };

    //def setDeck(newDeck) { myDeck := newDeck };

    def setPlayersCounter(counter) {
        playersCounter := counter;

        // if players counter < 2 -> disable play button !!! Disabled by default

        if: (playersCounter >= 2) then: {
            // if players counter > 2 -> enable game button
            gui.enableGameButton();
        } else: {
            if: (playersCounter == 4) then: {
                // if players counter == 4 -> disable connect button
                gui.disableConnectButton();
            }
        };
    };

    // Update deck function. We update deck in TS.
    def setDeck(Deck) {
         def deckTuple := tuple: ["UnoDeck", var: `deck];
         def updatedDeckTuple := tuple: ["UnoDeck", Deck];
         ts.when: deckTuple in:{
            ts.inject: updatedDeckTuple;
         };
    };

    def playCard(Card) {
       def onlinePlayersPrototype := tuple: ["UnoPlayer", var: `id, var: `player, true];
       def onlinePlayersTuples := ts.rdg(onlinePlayersPrototype);

       // use disableConnectionDialog()
       onlinePlayersTuples.each: { |tuple| tuple.getField(3) <- playedCard(Card)};

    };

    def getLeftPlayerRef() {
        def keysTable := otherPlayersHashMap.keySet().toArray();
        def sortedKeysTable := sort(keysTable);
        def key := sortedKeysTable[1];
        def leftPlayerRef;

        if: (sortedKeysTable.length() == 1) then: {
            if: (myID < key) then: {
              leftPlayerRef := otherPlayersHashMap.get(key);
            }
        } else: {
          if: (sortedKeysTable.length() == 2) then: {
          def a := otherPlayersHashMap.get(sortedKeysTable[1]);
          def b := otherPlayersHashMap.get(sortedKeysTable[2]);

          if: ((myID > sortedKeysTable[1]).and: { myID < sortedKeysTable[2] }) then: {
              leftPlayerRef := b;
          } else: {
              if: (myID < sortedKeysTable[1]) then: {
                  leftPlayerRef := a;
              }
          };
          } else: {
            def a := otherPlayersHashMap.get(sortedKeysTable[1]);
            def b := otherPlayersHashMap.get(sortedKeysTable[2]);
            def c := otherPlayersHashMap.get(sortedKeysTable[3]);

            if: ((myID > sortedKeysTable[1]).and: {myID < sortedKeysTable[2] }) then: {
                leftPlayerRef := b;
            } else: {
                if: ((myID > sortedKeysTable[2]).and: { myID < sortedKeysTable[3] }) then: {
                    leftPlayerRef := c;
                } else: {
                    if: ((myID < sortedKeysTable[1]).or: { myID > sortedKeysTable[3] }) then: {
                        leftPlayerRef := a;
                    }
                }
            };
          }
        };
        leftPlayerRef;
    };

    def getRightPlayerRef() {
        def keysTable := otherPlayersHashMap.keySet().toArray();
        def sortedKeysTable := sort(keysTable);
        def rightPlayerRef;

        if: (sortedKeysTable.length() == 1) then: {
          def key := sortedKeysTable[1];
          if: (myID > key) then: {
            rightPlayerRef := otherPlayersHashMap.get(key);
          }
        } else: {
          if: (sortedKeysTable.length() == 2) then: {
          def a := otherPlayersHashMap.get(sortedKeysTable[1]);
          def b := otherPlayersHashMap.get(sortedKeysTable[2]);

          if: ((myID > sortedKeysTable[1]).and: { myID < sortedKeysTable[2] }) then: {
              rightPlayerRef := a;
          } else: {
              if: (myID > sortedKeysTable[2]) then: {
                rightPlayerRef := b;
              };
          };
          } else: {
            def a := otherPlayersHashMap.get(sortedKeysTable[1]);
            def b := otherPlayersHashMap.get(sortedKeysTable[2]);
            def c := otherPlayersHashMap.get(sortedKeysTable[3]);

            if: ((myID > sortedKeysTable[1]).and: {myID < sortedKeysTable[2] }) then: {
                rightPlayerRef := a;
            } else: {
                if: ((myID > sortedKeysTable[2]).and: { myID < sortedKeysTable[3] }) then: {
                   rightPlayerRef := b;
                } else: {
                    if: ((myID < sortedKeysTable[1]).or: { myID > sortedKeysTable[3] }) then: {
                        rightPlayerRef := c;
                    }
                }
            };
          }
        };
        rightPlayerRef;
    };

    def getTopPlayerRef() {
        def keysTable := otherPlayersHashMap.keySet().toArray();
        def sortedKeysTable := sort(keysTable);
        def topPlayerRef;

        if: (sortedKeysTable.length() == 1) then: {
          def key := sortedKeysTable[1];
          if: (myID < key) then: {
              otherPlayersHashMap.get(key) <- setLeftPlayerCardCount(Amount);
          } else: {
              otherPlayersHashMap.get(key) <- setRightPlayerCardCount(Amount);
          };

        } else: {
          if: (sortedKeysTable.length() == 2) then: {
          def a := otherPlayersHashMap.get(sortedKeysTable[1]);
          def b := otherPlayersHashMap.get(sortedKeysTable[2]);

          if: ((myID < sortedKeysTable[1]).and: { myID > sortedKeysTable[2] }) then: { } else: {
              if: (myID < sortedKeysTable[1]) then: {
                  topPlayerRef := b;
              } else: {
                  if: (myID > sortedKeysTable[2]) then: {
                      topPlayerRef := a;
                  };
              };
          };
          } else: {
            def a := otherPlayersHashMap.get(sortedKeysTable[1]);
            def b := otherPlayersHashMap.get(sortedKeysTable[2]);
            def c := otherPlayersHashMap.get(sortedKeysTable[3]);

            if: ((myID > sortedKeysTable[1]).and: {myID < sortedKeysTable[2] }) then: {
                topPlayerRef := c;
            } else: {
                if: ((myID > sortedKeysTable[2]).and: { myID < sortedKeysTable[3] }) then: {
                    topPlayerRef := a;
                } else: {
                    if: ((myID < sortedKeysTable[1]).or: { myID > sortedKeysTable[3] }) then: {
                        topPlayerRef := b;
                    }
                }
            };
          }
        };
        topPlayerRef;
    };

    def updateOPcards(Amount) {
          def playerTupleTemplate := tuple: ["UnoPlayer", myID, var: `player, var: `isConnected];
          def thisPlayerTuple := ts.rdp(playerTupleTemplate);
          def thisPlayerFarRef := thisPlayerTuple.getField(3);

   		  def keysTable := otherPlayersHashMap.keySet().toArray();
          def sortedKeysTable := sort(keysTable);

          if: (sortedKeysTable.length() == 1) then: {
              def key := sortedKeysTable[1];
              if: (myID < key) then: {
                  otherPlayersHashMap.get(key) <- setLeftPlayerCardCount(Amount);
              } else: {
                  otherPlayersHashMap.get(key) <- setRightPlayerCardCount(Amount);
              };

              log("Total number of players = 2");
          } else: {
              if: (sortedKeysTable.length() == 2) then: {
              def a := otherPlayersHashMap.get(sortedKeysTable[1]);
              def b := otherPlayersHashMap.get(sortedKeysTable[2]);

              if: ((myID > sortedKeysTable[1]).and: { myID < sortedKeysTable[2] }) then: {
                  a <- setRightPlayerCardCount(Amount);
                  b <- setLeftPlayerCardCount(Amount);
              } else: {
                  if: (myID < sortedKeysTable[1]) then: {
                      a <- setLeftPlayerCardCount(Amount);
                      b <- setTopPlayerCardCount(Amount);
                  } else: {
                      if: (myID > sortedKeysTable[2]) then: {
                          a <- setTopPlayerCardCount(Amount);
                          b <- setRightPlayerCardCount(Amount);
                      };
                  };
              };
              log("Total number of players = 3");
              } else: {
                def a := otherPlayersHashMap.get(sortedKeysTable[1]);
                def b := otherPlayersHashMap.get(sortedKeysTable[2]);
                def c := otherPlayersHashMap.get(sortedKeysTable[3]);

                if: ((myID > sortedKeysTable[1]).and: {myID < sortedKeysTable[2] }) then: {
                    a <- setRightPlayerCardCount(Amount);
                    b <- setLeftPlayerCardCount(Amount);
                    c <- setTopPlayerCardCount(Amount);
                } else: {
                    if: ((myID > sortedKeysTable[2]).and: { myID < sortedKeysTable[3] }) then: {
                        a <- setTopPlayerCardCount(Amount);
                        b <- setRightPlayerCardCount(Amount);
                        c <- setLeftPlayerCardCount(Amount);
                    } else: {
                        if: ((myID < sortedKeysTable[1]).or: { myID > sortedKeysTable[3] }) then: {
                            a <- setLeftPlayerCardCount(Amount);
                            b <- setTopPlayerCardCount(Amount);
                            c <- setRightPlayerCardCount(Amount);
                        }
                    }
                };
                log("Total number of players = 4");
              }
          }

    };


    // Sort Implementation taken from documentation: http://soft.vub.ac.be/amop/at/tutorial/basic#control_flow_constructs
    // Based on quick sort algorithm.
    def sort(table, cmp := { |e1,e2| e1 < e2 }) {
      def quickSort(table, low, high) {
        def left := low;
        def right := high;
        def pivot := table[(left+right) /- 2];
        def save := nil;
        while: { left <= right } do: {
          while: { cmp(table[left], pivot) } do: {
            left := left + 1
          };
          while: { cmp(pivot, table[right]) } do: {
            right := right - 1
          };
          if: (left <= right) then: {
            // swap elements
            save := table[left];
            table[left] := table[right];
            table[right] := save;
            left := left + 1;
            right := right - 1;
          };
        };
        if: (low<right) then: { quickSort(table,low,right) };
        if: (high>left) then: { quickSort(table,left,high) };
        table;
      };
      quickSort(table, 1, table.length);
    };

    def nextID(table, currentID) {
        def nextID := -1;
        def notFound := true;
        def iterator := 1;

        while: { notFound } do: {
            if: (table[iterator] > currentID) then: {
                nextID := table[iterator];
                notFound := false;
            } else: {
                if: (iterator == table.length()) then: {
                    nextID := table[1];
                    notFound := false;
                }
            };
            iterator := iterator + 1;
        };

        nextID;
    };

    def prevID(table, currentID) {
        def iterator := table.length();
         def notFound := true;
        def predID := -1;
        // Use this method only with sorted table.
        while: { notFound } do: {
            if: (iterator == 1) then: {
                predID := table[table.length()];
                notFound := false;
            } else: {
                 if: (table[iterator] < currentID) then: {
                    predID := table[iterator];
                    notFound := false;
                 }
            };
            iterator := iterator - 1;
        };

        if: (predID == -1) then: { predID := table[table.length()] };

        predID;
    };

    def getNextPlayerID() {
        def unoGameStateProto := tuple: ["UnoGameState", var: `currentPlayerID, var: `moveDirection, var: `isGameEnded];
        def gameState := ts.rdp(unoGameStateProto);
        def nextPlayerID := myID; // In the begining we set it to our id, since we need to find higher value.
        def keyIt := otherPlayersHashMap.keySet().iterator();
        def valIt := otherPlayersHashMap.values().iterator();

        def keysTable := otherPlayersHashMap.keySet().toArray();

        def sortedKeysTable := sort(keysTable);

        if: (gameState.getField(3) == "Forward") then: {
            nextPlayerID := nextID(sortedKeysTable, myID);
            log("Player next id (Forward): " + nextPlayerID);
        } else: {
             // Next Player should be a player whom ID is lower than current player, but not lower than others.
            nextPlayerID := prevID(sortedKeysTable, myID);
            log("Player next id (Backwards): " + nextPlayerID);
        };

        nextPlayerID;
    };

    def getNextPlayerRef() {
        def nextPlayerID := getNextPlayerID();

        // Fetch Player
        def playerTupleTemplate := tuple: ["UnoPlayer", nextPlayerID, var: `player, var: `isConnected];
        def playerTuple := ts.rdp(playerTupleTemplate);
        def playerFarRef := playerTuple.getField(3);

        playerFarRef;
    };

    def nextPlayer() {
        def playerFarRef := getNextPlayerRef();
        playerFarRef <- playTurn();
    };

    def switchMoveDirection() {
        def unoGameStateProto := tuple: ["UnoGameState", var: `currentPlayerID, var: `moveDirection, var: `isGameEnded];
        ts.when: unoGameStateProto in: {
            if: (moveDirection == "Forward") then: {
                def unoGameStateUpdatedTuple := tuple: ["UnoGameState", currentPlayerID, "Backward", isGameEnded];
                ts.inject: unoGameStateUpdatedTuple;
            } else: {
                def unoGameStateUpdatedTuple := tuple: ["UnoGameState", currentPlayerID, "Forward", isGameEnded];
                ts.inject: unoGameStateUpdatedTuple;
            }
        };

        def playerFarRef := getNextPlayerRef();
        playerFarRef <- displayToast("Move direction changed. Please play your turn!");
    };

    def plusTwoAction() {
        // Get next player
        def playerFarRef := getNextPlayerRef();

        // Ask to draw to cards
        playerFarRef <- drawCards(2);

        // Ask player to skip a turn
        playerFarRef <- skipTurn();

        playerFarRef <- displayToast("You had to draw 2 cards and skipped the turn!");
    };

    def skipAction() {
        // Get next player
        def playerFarRef := getNextPlayerRef();

        // Ask player to skip a turn
        playerFarRef <- skipTurn();

        playerFarRef <- displayToast("You had to skip the round!");
    };

    def plusFourWild() {
         def playerFarRef := getNextPlayerRef();

        // Ask player to skip a turn
        playerFarRef <- drawCards(4);
        playerFarRef <- skipTurn();

        playerFarRef <- displayToast("You had to draw 4 cards and skip the round!");
    };

    def unoSignal() {
        gui.unoSignaled();
    };

    def leftPlayerUnoSignal() {
        getLeftPlayerRef() <- playerUnoSignal();
    };

    def rightPlayerUnoSignal() {
        getRightPlayerRef <- playerUnoSignal();
    };

    def topPlayerUnoSignal() {
        getTopPlayerRef <- playerUnoSignal();
    };

    def initializeGame(Deck) {
        // Deck tuple in format ["UnoDeck", var: `deck]
        def deckTuple := tuple: ["UnoDeck", Deck];
        ts.inject: deckTuple;

        def onlinePlayersPrototype := tuple: ["UnoPlayer", var: `id, var: `player, true];
        def onlinePlayersTuples := ts.rdg(onlinePlayersPrototype);

        // use disableConnectionDialog()
        onlinePlayersTuples.each: { |tuple| tuple.getField(3) <- disableConnectionDialog()};

        // set start game state tuple
        def unoGameState := tuple: ["UnoGameState", myID, "Forward", false];
        ts.inject: unoGameState;
    };

    def getId() {
        myID;
    };

    def getPlayersCounter() { playersCounter };
  };

  //interface for remote painters.
  def remoteInterface := object: {

    //def sendReferenceToGUI() {}
    def receiveTestMessageFromAnother() { log("HEY FROM OUTSIDE"); }; // Удалить позже

    // Name Getter
    def getName() {
        myName;
    };

    // ID Getter
    def getID() {
        myID;
    };

    def initializeGame(Deck) {
        myDeck := Deck;
        // Sync deck
        gui.updateDeck(Deck);
        gui.disableConnectionDialog();
        gui.setGameState();

        gui.setLeftPlayerCardCount(0);
        gui.setTopPlayerCardCount(0);
        gui.setRightPlayerCardCount(0);
    };

    def disableConnectionDialog() {
        gui.disableConnectionDialog();
    };

    def drawCards(NumToDraw) {
        gui.drawCards(NumToDraw);
    };

    def updateDeck(Deck) {
        gui.updateDeck(Deck);
    };

    def playedCard(Card) {
        log("Color: " + Card);
        log("Action: " + Card[1]);

        def card := jlobby.edu.vub.at.weuno.Card.new(Card[1], Card[2], true);
        gui.playCard(card);
    };

    def setTopPlayerCardCount(n) {
        gui.setTopPlayerCardCount(n);
    };

    def setLeftPlayerCardCount(n) {
        gui.setLeftPlayerCardCount(n);
    };

    def setRightPlayerCardCount(n) {
        gui.setRightPlayerCardCount(n);
    };

    def playTurn() {
        gui.playTurn();
    };

    def skipTurn() {
        localInterface.nextPlayer();
    };

    def playerUnoSignal() {
        gui.unoSignalVerification();
    };

    def displayToast(Msg) {
        gui.displayToast(Msg);
    };

    def goOnline() {
        // setup peer-to-peer service discovery
        network.online();

        ts := makeTupleSpace();
        ts.goOnline(); // start exchanging public tuples

        // Announce myself

        def selfTuple := tuple: ["UnoPlayer", myID, self, isConnected];
        log("MYSELF: " + myID);

        ts.inject: selfTuple;

        def playerTuple := tuple: ["UnoPlayer", var: `id, var: `player, var: `isConnected];
        ts.whenever: playerTuple read: {
             if: (!otherPlayers.contains(player)) then: {
                otherPlayers := otherPlayers + [player];
             };

             // Update gamers counter UI
             def onlinePlayersPrototype := tuple: ["UnoPlayer", var: `id, var: `player, true];
             def onlinePlayersTuples := ts.rdg(onlinePlayersPrototype);
             if: (onlinePlayersTuples.length > 0) then: {
                log("online Players Tuples: " + onlinePlayersTuples);
                gui.updateConnectedGamersCounter(onlinePlayersTuples.length);

                if: (onlinePlayersTuples.length != playersCounter) then: {
                    localInterface.setPlayersCounter(onlinePlayersTuples.length);
                };
             };

             if: (isConnected) then: {
                if: (!otherPlayersHashMap.containsKey(id)) then: {
                    if: (id != myID) then: { otherPlayersHashMap.put(id, player) }
                }
             };

             //whenever: player disconnected: {
             //    log("Player disconnected");
                  //TODO
             //};

             //whenever: player reconnected: {
             //    log("Player reconnected");
                 // TODO
             //};
        };

        // State Game Listener
        def unoGameStateProto := tuple: ["UnoGameState", var: `currentPlayerID, var: `moveDirection, var: `isGameEnded];
        ts.whenever: unoGameStateProto read: {
            log("Game state has been updated! Current move direction is: " + moveDirection);
        };


        def deckTuple := tuple: ["UnoDeck", var: `deck];
        ts.whenever: deckTuple read: {
            gui.setDeck(deck);
        };
    };

  goOnline();
  log("Hallo Android!");

  // example symbiosis
  gui := Android.parent.registerAtApplication(localInterface);
  Android.parent.topUnoAnimation();
  }; //end-remoteInterface
};

network.online;
self;