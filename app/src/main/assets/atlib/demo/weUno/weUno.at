import /.at.lang.futures;
enableFutures(false);


def log(text) {
  Android.Log.i("weUno", text);
};

def makeWeUno() {
object: {
  // myID := /.at.support.util.randomNumberBetween(1, 125)
  // Init this variable when device's player clicked connect button.
  def myReference;

  //def myID;
  def myName; // Let us suppose that each name is unique. (impossible to have two players with the same name).

  // By default all devices have id == 0.
  //We change our ID as soon as we get new device discovered.
  //If we discover new device -> we change our ID, unless we are already connected to the game.
  def myID := 0;

  // isConnected variable is our condition checker.
  // !! We will not change myID if isConnected is true.
  def isConnected := false;

  // Players who connected to the session. By default is zero.
  // Getter function getPlayersCounter().
  def playersCounter := 0;

  // Add new players to these lists (exclude player on this playing device).
  //HashMap of [userName,Far Reference]
  // UPD: HashMap of [userID,[Username, Far Reference]]
  //def otherPlayersHashMap := jlobby.java.util.HashMap.new();
  def otherPlayersHashMap := jlobby.edu.vub.at.weuno.PlayersHashMap.new();
  //Array of far references, avoids iterating over hashmap
  def otherPlayers := [];

  def gui; // reference to Android UI object.

  def myDeck; // created deck variable because impossible to pass java objects in methods in AT. :(

  // connection between other players
  def pred;
  def succ;

  def isPredSet := false;
  def isSuccSet := false;

  deftype UnoGame;

  //interface for android gui.
  def localInterface := object: {
    def connectPlayer(username) {
        myReference := remoteInterface;
        myName := username;

        isConnected := true;

        // Update players counter for this device
        remoteInterface.setPlayersCounter(playersCounter + 1);
        gui.updateConnectedGamersCounter(playersCounter);

        otherPlayers.each: { |pl|
            // Notify other players about the new player
            pl <- newPlayer(getId(), username, myReference, getPlayersCounter());
        };
        /////
    };

    def getDeck() { myDeck };

    def setDeck(newDeck) { myDeck := newDeck };

    def initializeGame(Deck) {
        setDeck(Deck);
        // Sync deck on other devices.
        otherPlayers.each: { |pl| pl <- initializeGame(Deck) };
    };

    def initializeRelations() {
        // TODO: update pred on other devices
        // join(UserID, FarRef);
        otherPlayers.each: { |pl| pl <- join(myID, remoteInterface) };
    };

    // This function is used to ask other players to draw cards instantly.
    def drawCards(Num) {
        //otherPlayers.each: { |pl| pl <- drawCards(Num) };
        // TODO---
        // We start to ask a draw from succ player (the next player)
        succ[2] <- drawCards(Num);
    };

    def updateDeck(Deck) {
        setDeck(Deck);
        otherPlayers.each: { |pl| pl <- updateDeck(Deck) };
    };

    def drawedCards(NumberOfCards, Deck) {
        myReference := remoteInterface;
        setDeck(Deck);
        otherPlayers.each: { |pl| pl <- drawedCards(NumberOfCards, Deck, myReference) };
    };

    def getId() {
        myID;
    };


    def getPlayersCounter() { playersCounter };

    def nextPlayer() {
        // Next Player is id + 1, unless id == size, then id == 0;
    };
  };

  //interface for remote painters.
  def remoteInterface := object: {

    succ := [myID, self];
    pred := [myID, self];

    def inRangeWithSucc(PeerID) {
       if:(PeerID == myID + 1) then: { true } else: { false };
    };

    def inRangeWithPred(PeerID) {
        if:(PeerID == myID - 1) then: { true } else: { false };
    };

    def newSucc(PeerID, PeerRef) {
        if:(isSuccSet) then: {} else: {
            isSuccSet := true;
            if: (inRangeWithSucc(PeerID)) then: {
                succ := [PeerID, PeerRef];
            };
        };
    };

    def newPred(PeerID, PeerRef) {
            if:(isPredSet) then: {} else: {
                isPredSet := true;
               if: (inRangeWithPred(PeerID)) then: {
                        pred := [PeerID, PeerRef];
               };
            };
    };

    def join(PeerID, PeerRef) {
         if: (inRangeWithPred(PeerID)) then: {
              pred[2] := PeerRef;
              pred[1] := PeerID;

              PeerRef <- newSucc(myID, remoteInterface);
              };
               otherPlayers.each: { |pl| pl <- updateNewPredAndSucc(myID, remoteInterface); }
    };

    def updateNewPredAndSucc(ID, Ref) {
        newSucc(ID, Ref);
        newPred(ID, Ref);
    };

    def getTestVariable := "Testik"; // Удалить позже

    //def sendReferenceToGUI() {}
    def receiveTestMessageFromAnother() { log("HEY FROM OUTSIDE"); }; // Удалить позже

    // Add new player which clicked connect button in players list.
    def getPlayer() {
        myName;
    };

    def setPlayersCounter(counter) {
        playersCounter := counter;

        // if players counter < 2 -> disable play button !!! Disabled by default

        if: (playersCounter >= 2) then: {
            // if players counter > 2 -> enable game button
            gui.enableGameButton();
        } else: {
            if: (playersCounter == 4) then: {
                // if players counter == 4 -> disable connect button
                gui.disableConnectButton();
            }
        };
    };

    def newPlayer(UserID, Username, FarRef, PlayersCounter) {
        if: ((otherPlayersHashMap.containsKey(UserID)).not()) then: {

                // Update this device id to the new one. !!! Only if you are not connected !!!
                if: ((isConnected).not()) then: {
                    myID := UserID + 1;
                };

                def newPl := jlobby.edu.vub.at.weuno.Player.new(Username, FarRef);

                // Add new user to hash map if no such user has been found
                otherPlayersHashMap.put(UserID, newPl);

                // Sync players counter
                setPlayersCounter(PlayersCounter);

                // Update UI
                gui.updateConnectedGamersCounter(playersCounter);
        };
    };

    def initializeGame(Deck) {
        myDeck := Deck;
        // Sync deck
        gui.updateDeck(Deck);
        gui.disableConnectionDialog();
        gui.setGameState();

        gui.setLeftPlayerCardCount(0);
        gui.setTopPlayerCardCount(0);
        gui.setRightPlayerCardCount(0);
    };

    def drawCards(NumToDraw) {
        log("Myself: " + self);
        log("PRED: " + pred);
        log("SUCC: " + succ);
        //log("Other Players: " + otherPlayersHashMap.toString());

        gui.drawCards(NumToDraw);

        //succ[2] <- drawCards(NumToDraw);

        // If you have no successor then stop
        if: ((succ[2] == self)) then: { log("End of point. No succ: " + succ[2])  } else: { succ[2] <- drawCards(NumToDraw) };
        //if: ((succ[2] == self).not()) then: { succ[2] <- drawCards(NumToDraw); log("I am: " + succ[2]) } else: { log("Vsyo: " + succ[2]) };
    };

    def updateDeck(Deck) {
        gui.updateDeck(Deck);
    };

    def drawedCards(NumberOfCards, Deck, SenderFarRef) {
        // Find id of the players from hash map of players.
        //gui.getPlayerIdFromHMList(otherPlayersHashMap, SenderFarRef);
        def opponentID := otherPlayersHashMap.getPlayerId(SenderFarRef);

        myDeck := Deck;

        // TODO


        gui.updateDeck(Deck);

        if:(opponentID == 0) then: {
            if: (opponentID == myID-1) then: {
                        gui.setRightPlayerCardCount(NumberOfCards);
                     } else: {
                        if:(opponentID == myID+1) then: {
                            gui.setLeftPlayerCardCount(NumberOfCards);
                        } else: {
                            gui.setTopPlayerCardCount(NumberOfCards);
                        };
                     };
        } else: {
            if: (opponentID == myID+1) then: {
                        gui.setLeftPlayerCardCount(NumberOfCards);
                     } else: {
                        if:(opponentID == myID-1) then: {
                            gui.setRightPlayerCardCount(NumberOfCards);
                        } else: {
                            gui.setTopPlayerCardCount(NumberOfCards);
                        };
                     };
        };
    }

  }; //end-remoteInterface


   def goOnline() {
   	// setup peer-to-peer service discovery

   	export: remoteInterface as: UnoGame;
     		whenever: UnoGame discovered: { |ref|
     		    log("Test from One");
     		    ref <- receiveTestMessageFromAnother();

     		    if: (!otherPlayers.contains(ref)) then: {
                    otherPlayers := otherPlayers + [ref];
                };
     			//when: ref<-receiveTestMessageFromAnother()@FutureMessage becomes: { |varTest|
     			//	log("User Variable Test:" + varTest);
     			//	};

                whenever: ref disconnected: {
                    //jPortalPong.died(id);
                    log("Device disconected:" + ref);
                    // TODO
                };

                whenever: ref reconnected: {
                    // jPortalPong.resurrected(id);
                    log("Device reconected:" + ref);
                    // TODO
                };
     		};
   };

  goOnline();
  log("Hallo Android!");

  // example symbiosis
  gui := Android.parent.registerAtApplication(localInterface);
  Android.parent.topUnoAnimation();
};

};

network.online;
self;